{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Wyvern",
  "scopeName": "source.wyvern",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#definitions"
    },
    {
      "include": "#match-ctrl"
    },
    {
      "include": "#expressions"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "include": "#line-comment"
        },
        {
          "include": "#block-comment"
        }
      ]
    },
    "line-comment": {
      "name": "comment.line.double-slash.wyvern",
      "match": "//.*"
    },
    "block-comment": {
      "name": "comment.block.wyvern",
      "begin": "/\\*",
      "end": "\\*/"
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.wyvern",
          "match": "\\b(if|elif|else)\\b"
        },
        {
          "name": "keyword.operator.new.wyvern",
          "match": "\\bnew\\b"
        },
        {
          "name": "keyword.other.require.wyvern",
          "match": "\\brequire\\b"
        },
        {
          "name": "keyword.other.import.wyvern",
          "match": "\\bimport\\b"
        },
        {
          "name": "keyword.other.assert.wyvern",
          "match": "\\bassert\\b"
        },
        {
          "name": "keyword.operator.math.wyvern",
          "match": "(\\+|-|\\*|\\/)"
        },
        {
          "name": "keyword.operator.comparison.wyvern",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.boolean.wyvern",
          "match": "(&&|\\|\\|)"
        },
        {
          "name": "meta.keyword.operator.match.wyvern",
          "match": "(:)\\s*(?:[a-zA-Z_](?:\\w|\\.)*)\\s*(=>)",
          "captures": {
            "1": {
              "name": "keyword.operator.match.option.colon.wyvern"
            },
            "2": {
              "name": "keyword.operator.match.option.arrow.wyvern"
            }
          }
        }
      ]
    },
    "param-decl": {
      "name": "meta.parameter.wyvern",
      "match": "((?:[a-zA-Z_]\\w*))(?:\\s*:\\s*(?<type>(?>(?:[a-zA-Z0-9\\.\\*_ ]|->|=>)|\\(\\s*\\g<type>\\s*\\)|\\[\\s*\\g<type>(?:\\s*,\\s*\\g<type>)*\\s*\\])+))?",
      "captures": {
        "1": {
          "name": "variable.parameter.wyvern"
        },
        "2": {
          "name": "storage.type.wyvern"
        }
      }
    },
    "definitions": {
      "patterns": [
        {
          "include": "#field-def"
        },
        {
          "include": "#function-def"
        },
        {
          "include": "#objtype-def"
        },
        {
          "include": "#datatype-def"
        }
      ]
    },
    "field-def": {
      "name": "meta.definition.field.wyvern",
      "match": "\\b(val|var)\\s+((?:[a-zA-Z_]\\w*))(?:\\s*:\\s*(?<type>(?>(?:[a-zA-Z0-9\\.\\*_ ]|->|=>)|\\(\\s*\\g<type>\\s*\\)|\\[\\s*\\g<type>(?:\\s*,\\s*\\g<type>)*\\s*\\])+))?\\s*(=)?",
      "captures": {
        "1": {
          "name": "storage.modifier.$1.wyvern"
        },
        "2": {
          "name": "entity.name.variable.wyvern"
        },
        "3": {
          "name": "storage.type.wyvern"
        },
        "4": {
          "name": "keyword.operator.assignment.wyvern"
        }
      }
    },
    "function-def": {
      "name": "meta.definition.function.wyvern",
      "begin": "\\b(def)\\s+((?:[a-zA-Z_]\\w*))(?:\\[((?:[a-zA-Z_]\\w*)(?:\\s*,\\s*(?:[a-zA-Z_]\\w*))*)\\])?\\s*\\(",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.def.wyvern"
        },
        "2": {
          "name": "entity.name.function.wyvern"
        },
        "3": {
          "name": "entity.name.type.generic.wyvern"
        }
      },
      "end": "\\)(?:\\s*:\\s*(?<type>(?>(?:[a-zA-Z0-9\\.\\*_ ]|->|=>)|\\(\\s*\\g<type>\\s*\\)|\\[\\s*\\g<type>(?:\\s*,\\s*\\g<type>)*\\s*\\])+))?",
      "endCaptures": {
        "1": {
          "name": "storage.type.wyvern"
        }
      },
      "patterns": [
        {
          "name": "meta.function.arg-list.wyvern",
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "include": "#param-decl"
            }
          ]
        }
      ]
    },
    "objtype-def": {
      "name": "meta.definition.type.wyvern",
      "match": "\\b(?>(resource)\\s+)?(type)\\s+((?:[a-zA-Z_]\\w*))",
      "captures": {
        "1": {
          "name": "storage.modifier.resource.wyvern"
        },
        "2": {
          "name": "storage.modifier.type.wyvern"
        },
        "3": {
          "name": "entity.name.type.wyvern"
        }
      }
    },
    "datatype-variant": {
      "patterns": [
        {
          "name": "meta.definition.type.datatype.variant.wyvern",
          "begin": "\\b((?:[a-zA-Z_]\\w*))\\s*\\(",
          "beginCaptures": {
            "1": {
              "name": "entity.name.type.datatype.variant.wyvern"
            }
          },
          "end": "\\)",
          "patterns": [
            {
              "include": "#param-decl"
            }
          ]
        },
        {
          "name": "meta.definition.type.datatype.variant.wyvern",
          "match": "\\b((?:[a-zA-Z_]\\w*))(?!\\()",
          "captures": {
            "1": {
              "name": "entity.name.type.datatype.variant.wyvern"
            }
          }
        }
      ]
    },
    "datatype-def": {
      "name": "meta.definition.type.datatype.wyvern",
      "begin": "^(\\s*)(datatype)\\s+((?:[a-zA-Z_]\\w*))(?:\\[((?:[a-zA-Z_]\\w*))\\])?",
      "beginCaptures": {
        "2": {
          "name": "storage.modifier.datatype.wyvern"
        },
        "3": {
          "name": "entity.name.type.wyvern"
        },
        "4": {
          "name": "entity.name.type.generic.wyvern"
        }
      },
      "end": "^(?!\\1\\s)",
      "patterns": [
        {
          "include": "#datatype-variant"
        }
      ]
    },
    "match-ctrl": {
      "name": "meta.control.match.wyvern",
      "match": "\\b(match)\\s+(?:[a-zA-Z_](?:\\w|\\.)*)(:)",
      "captures": {
        "1": {
          "name": "keyword.control.match.wyvern"
        },
        "2": {
          "name": "keyword.control.match.colon.wyvern"
        }
      }
    },
    "expressions": {
      "name": "meta.expression.wyvern",
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#strings"
        },
        {
          "include": "#objects"
        },
        {
          "include": "#object-fields"
        },
        {
          "include": "#function-call-expression"
        },
        {
          "include": "#lambda-expression"
        },
        {
          "include": "#constants"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.numeric.wyvern",
          "match": "\\b[0-9]+(?:\\.[0-9]+)?\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.wyvern",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.wyvern",
          "match": "\\\\."
        }
      ]
    },
    "objects": {
      "name": "meta.variable.other.object.wyvern",
      "match": "\\b((?:[a-zA-Z_]\\w*))(?=\\.)",
      "captures": {
        "1": {
          "name": "variable.other.object.wyvern"
        }
      }
    },
    "object-fields": {
      "name": "meta.variable.other.object.property.wyvern",
      "match": "(?<=\\.)((?:[a-zA-Z_]\\w*))\\b(?!\\(|\\[)",
      "captures": {
        "1": {
          "name": "variable.other.object.property.wyvern"
        }
      }
    },
    "function-call-expression": {
      "name": "meta.expression.function-call.wyvern",
      "match": "\\b((?:[a-zA-Z_]\\w*))(?:(\\[)(?<typelist>(?>(?:[a-zA-Z0-9\\.\\*_, ]|->|=>)|\\(\\s*\\g<typelist>\\s*\\)|\\[\\s*\\g<typelist>\\s*\\])+)(\\]))?\\(",
      "captures": {
        "1": {
          "name": "entity.name.function.wyvern"
        },
        "2": {
          "name": "entity.name.function.generic.wyvern"
        },
        "3": {
          "name": "storage.modifier.type.generic.wyvern"
        },
        "4": {
          "name": "entity.name.function.generic.wyvern"
        }
      }
    },
    "lambda-expression": {
      "patterns": [
        {
          "name": "meta.expression.lambda.wyvern",
          "match": "\\((?<args>(?>[^()]|\\(\\g<args>\\))*)\\)\\s*(=>)",
          "captures": {
            "1": {
              "name": "meta.expression.lambda.arg-list.wyvern",
              "patterns": [
                {
                  "include": "#param-decl"
                }
              ]
            },
            "2": {
              "name": "keyword.language.lambda.arrow.wyvern"
            }
          }
        },
        {
          "name": "meta.expression.lambda.wyvern",
          "match": "\\b((?:[a-zA-Z_]\\w*))(?:\\s*:\\s*(?<type>(?>(?:[a-zA-Z0-9\\.\\*_ ]|->|=>)|\\(\\s*\\g<type>\\s*\\)|\\[\\s*\\g<type>(?:\\s*,\\s*\\g<type>)*\\s*\\])+))?\\s*(=>)",
          "captures": {
            "1": {
              "name": "variable.parameter.wyvern"
            },
            "2": {
              "name": "storage.modifier.type.wyvern"
            },
            "3": {
              "name": "keyword.language.lambda.arrow.wyvern"
            }
          }
        }
      ]
    }
  }
}
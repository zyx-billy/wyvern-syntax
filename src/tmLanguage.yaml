$schema: "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json"
name: Wyvern
scopeName: source.wyvern
patterns:
- {include: "#comments"}
- {include: "#keywords"}
- {include: "#definitions"}
- {include: "#match-ctrl"}
- {include: "#expression"}
repository:
  # comments
  comments:
    patterns:
    - {include: "#line-comment"}
    - {include: "#block-comment"}

  line-comment:
    name: comment.line.double-slash.wyvern
    match: //.*

  block-comment:
    name: comment.block.wyvern
    begin: /\*
    end: \*/

  keywords:
    patterns:
    - name: keyword.control.wyvern
      match: \b(if|elif|else)\b
    - name: keyword.operator.new.wyvern
      match: \bnew\b
    - name: keyword.operator.math.wyvern
      match: (\+|-|\*|\/)
    - name: meta.keyword.operator.match.wyvern
      match: (:)\s*$$path$$\s*(=>)
      captures:
        "1": {name: keyword.operator.match.option.colon.wyvern}
        "2": {name: keyword.operator.match.option.arrow.wyvern}
  
  # types
  type-annotation:
    name: meta.storage.type.wyvern
    match: :\s*($$type$$)
    captures:
      "1": {name: storage.type.wyvern}

  # parameters of a function definition
  function-param:
    name: meta.function.parameter.wyvern
    match: ($$ident$$)(?:\s*:\s*($$type$$))?
    captures:
      "1": {name: variable.parameter.wyvern}
      "2": {name: storage.type.wyvern}

  # definitions
  definitions:
    patterns:
    - {include: "#field-def"}
    - {include: "#function-def"}
    - {include: "#objtype-def"}
    - {include: "#datatype-def"}

  field-def:
    name: meta.definition.field.wyvern
    match: \b(val|var)\s+($$ident$$)(?:\s*:\s*($$type$$))?\s*(=)?
    captures:
      "1": {name: storage.modifier.$1.wyvern}
      "2": {name: entity.name.variable.wyvern}
      "3": {name: storage.type.wyvern}
      "4": {name: keyword.operator.assignment.wyvern}

  function-def:
    patterns:
    - name: meta.definition.function.wyvern
      # recursive regex definition for args list to make sure parentheses match
      match: \b(def)\s+($$ident$$)\s*\($$args$$\)\s*:\s*($$type$$)
      captures:
        "1": {name: storage.modifier.def.wyvern}
        "2": {name: entity.name.function.wyvern}
        "3":
          name: meta.function.arg-list.wyvern
          patterns:
          - {include: "#comments"}
          - {include: "#function-param"}
        "4": {name: storage.type.wyvern}

  objtype-def:
    name: meta.definition.type.wyvern
    match: \b(?>(resource)\s+)?(type)\s+($$ident$$)
    captures:
      "1": {name: storage.modifier.resource.wyvern}
      "2": {name: storage.modifier.type.wyvern}
      "3": {name: entity.name.type.wyvern}

  datatype-def:
    name: meta.definition.datatype.wyvern
    match: \b(datatype)\s+($$ident$$)
    captures:
      "1": {name: storage.modifier.datatype.wyvern}
      "2": {name: entity.name.type.wyvern}

  # control
  match-ctrl:
    name: meta.control.match.wyvern
    begin: \b(match)\b
    beginCaptures:
      "1": {name: keyword.control.match.wyvern}
    end: (:)
    endCaptures:
      "1": {name: keyword.control.match.colon.wyvern}
  
  # expressions
  expression:
    name: meta.expression.wyvern
    patterns:
    - {include: "#comments"}
    - {include: "#keywords"}
    - {include: "#constant"}
    - {include: "#strings"}
    - {include: "#function-call-expression"}
    - {include: "#lambda-expression-with-parens"}

  constant:
    patterns:
    - name: constant.numeric.wyvern
      match: \b[0-9]+(?:\.[0-9]+)?\b
    - name: constant.language.unit.wyvern
      match: \s\(\)

  strings:
    name: string.quoted.double.wyvern
    begin: '"'
    end: '"'
    patterns:
    - name: constant.character.escape.wyvern
      match: \\.

  function-call-expression:
    name: meta.expression.function-call.wyvern
    match: \b($$ident$$)\($$args$$\)
    captures:
      "1": {name: entity.name.function.wyvern}
      "2":
        name: meta.expression.function-call.arg-list.wyvern
        patterns:
        - {include: "#expression"}
  
  lambda-expression-with-parens:
    patterns:
      # lambda expressions without parens are included in the keywords rule (with match)
    - name: meta.expression.lambda.wyvern
      match: \($$args$$\)\s*(=>)
      captures:
        "1":
          name: meta.expression.lambda.arg-list.wyvern
          patterns:
          - {include: "#function-param"}
        "2": {name: keyword.language.lambda.arrow.wyvern}
    - name: meta.expression.lambda.wyvern
      match: \b($$ident$$)\s*(=>)
      captures:
        "1": {name: variable.parameter.wyvern}
        "2": {name: keyword.language.lambda.arrow.wyvern}

